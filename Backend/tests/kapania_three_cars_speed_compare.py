#!/usr/bin/env python3
"""
Kapania: Compare final velocity profiles for three car parameter sets on the same path.

Output: Backend/tests/poster_output/kapania_three_cars_speed_compare.(png|pdf)

explaintion:
Forward pass assumes you can keep accelerating until you hit the local cornering limit v_ss(s). It doesn’t yet account for the need to brake for a tighter corner coming up.
Backward pass enforces braking feasibility for every upcoming corner. It reduces speeds upstream so that deceleration over the available distance Δs with effective braking force is physically possible. This typically lowers peaks and creates earlier slow‑downs, producing the final feasible profile.

"""
import os
import numpy as np
import matplotlib.pyplot as plt

from simulation.algorithms.kapania_model import KapaniaModel


def compute_segment_distances(points: np.ndarray) -> np.ndarray:
    d = np.zeros(len(points))
    for i in range(1, len(points)):
        d[i-1] = np.linalg.norm(points[i] - points[i-1])
    return d


def calculate_curvature_from_points(points: np.ndarray) -> np.ndarray:
    n = len(points)
    kappa = np.zeros(n)
    for i in range(1, n - 1):
        p1, p2, p3 = points[i - 1], points[i], points[i + 1]
        v1 = p2 - p1
        v2 = p3 - p2
        cross_mag = abs(v1[0] * v2[1] - v1[1] * v2[0])
        len1 = np.linalg.norm(v1)
        len2 = np.linalg.norm(v2)
        if len1 > 1e-6 and len2 > 1e-6:
            kappa[i] = cross_mag / (len1 * len2)
    if n > 1:
        kappa[0] = kappa[1]
        kappa[-1] = kappa[-2]
    return kappa


def compute_speed_profiles(track_points: np.ndarray, car_params: dict, friction: float = 1.0):
    model = KapaniaModel()
    params = model._extract_kapania_parameters(car_params)

    curvature = calculate_curvature_from_points(track_points)
    distances = compute_segment_distances(track_points)
    n = len(track_points)

    mass = params['mass']
    max_engine_force = params['max_engine_force']
    front_cs = params.get('front_cornering_stiffness', 80000.0)
    rear_cs = params.get('rear_cornering_stiffness', 120000.0)
    avg_cs = (front_cs + rear_cs) / 2.0
    cornering_factor = avg_cs / 100000.0
    downforce_factor = params.get('downforce_factor', 3.0)
    max_straight_speed = params.get('max_straight_speed', 85.0)
    max_speed_limit = params.get('max_speed_limit', 90.0)
    min_corner_speed = params.get('min_corner_speed', 15.0)
    g = 9.81

    # Steady-state speed
    v_ss = np.zeros(n)
    for i in range(n):
        if abs(curvature[i]) > 1e-6:
            base = np.sqrt((friction * g) / abs(curvature[i]))
            suspension_factor = cornering_factor * 1.2 + 0.3
            v_ss[i] = base * downforce_factor * suspension_factor
        else:
            power_factor = max_engine_force / 15000.0
            v_ss[i] = max_straight_speed * (0.8 + 0.2 * power_factor)
        v_ss[i] *= (0.90 + 0.10 * (798.0 / mass))
        v_ss[i] = min(v_ss[i], max_speed_limit)
        v_ss[i] = max(v_ss[i], min_corner_speed)

    # Forward pass
    v_fwd = v_ss.copy()
    power_to_weight = max_engine_force / mass
    base_p2w = 15000.0 / 798.0
    accel_factor = power_to_weight / base_p2w
    for i in range(1, n):
        if distances[i-1] > 0:
            F_lat = mass * (v_fwd[i-1] ** 2) * abs(curvature[i-1])
            corner_loss = min(F_lat / (mass * 50.0), 0.3)
            F_available = max_engine_force * (1.0 - corner_loss)
            F_eff = F_available * accel_factor
            v2 = v_fwd[i-1] ** 2 + (2 * F_eff * distances[i-1]) / mass
            v_fwd[i] = min(np.sqrt(max(v2, min_corner_speed ** 2)), v_ss[i])

    # Backward pass
    v_fin = v_fwd.copy()
    yaw_inertia = params.get('yaw_inertia', 1200.0)
    stability_factor = 1200.0 / yaw_inertia
    brake_mult = params.get('brake_force_multiplier', 3.0)
    for i in range(n - 2, -1, -1):
        if distances[i] > 0:
            base_brake = max_engine_force * brake_mult
            mass_factor_b = 798.0 / mass
            stab_brake = stability_factor * 0.3 + 0.7
            F_lat_next = mass * (v_fin[i+1] ** 2) * abs(curvature[i+1])
            loss_b = min(F_lat_next / (mass * 30.0), 0.4)
            F_brake_eff = base_brake * mass_factor_b * stab_brake * (1.0 - loss_b)
            v2 = v_fin[i+1] ** 2 - (2 * F_brake_eff * distances[i]) / mass
            v_fin[i] = min(np.sqrt(max(v2, min_corner_speed ** 2)), v_fwd[i])

    s = np.cumsum(distances)
    return s, v_fwd, v_fin


def main():
    # Same frontend path as algorithm comparison
    frontend_track_data = [
        {'x': 341.08718363444007, 'y': 277.5368279351128}, {'x': 342.1095582938488, 'y': 273.3653425051842},
        {'x': 343.46541462546344, 'y': 269.5151678223996}, {'x': 345.00944516484714, 'y': 265.78678411464284},
        {'x': 346.5578797780059, 'y': 262.32437258393844}, {'x': 348.72211211945904, 'y': 258.2330233613559},
        {'x': 350.67226819356114, 'y': 254.6985144126522}, {'x': 352.4842193339776, 'y': 251.6099013829573},
        {'x': 354.43522676779213, 'y': 248.52656685030067}, {'x': 356.53346455370956, 'y': 245.27437847064868},
        {'x': 358.8621373659692, 'y': 241.85757861258193}, {'x': 361.5054171035167, 'y': 238.2580778880838},
        {'x': 364.3829081124498, 'y': 234.4530251828501}, {'x': 367.48333072955666, 'y': 230.5466271863014},
        {'x': 370.79202953516074, 'y': 226.54385985087302}, {'x': 374.2084554251563, 'y': 222.5437319476705},
        {'x': 377.60799682066164, 'y': 218.70977738165422}, {'x': 380.9028976755024, 'y': 215.0092688548575},
        {'x': 384.15852541967735, 'y': 211.33086743242993}, {'x': 387.5248364839046, 'y': 207.7218863800166},
        {'x': 390.91278200825445, 'y': 204.4368971174881}, {'x': 394.4419376591711, 'y': 201.32484127500575},
        {'x': 398.2150373579486, 'y': 198.26587398590388}, {'x': 402.15477173952803, 'y': 195.35519982447627},
        {'x': 406.2911901301596, 'y': 192.58656189060684}, {'x': 410.48505989532936, 'y': 189.99816991024463},
        {'x': 414.74476564587457, 'y': 187.67211109237869}, {'x': 419.1370733961409, 'y': 185.6035286254515},
        {'x': 423.51287666890113, 'y': 183.85123880116274}, {'x': 427.6626070514126, 'y': 182.57020970071449},
        {'x': 431.65089513820493, 'y': 181.69980093234153}, {'x': 435.5973967179637, 'y': 181.16001148750766},
        {'x': 439.49501238921454, 'y': 180.89530388395158}, {'x': 443.3901911134742, 'y': 180.77765606014887},
        {'x': 447.2749807726552, 'y': 180.8287059326332}, {'x': 450.9595033691787, 'y': 181.15693600351548},
        {'x': 455.1988262526693, 'y': 182.3951192757595}, {'x': 459.553135998124, 'y': 184.64502223013838},
        {'x': 463.90309944582896, 'y': 187.97081509201175}, {'x': 467.4171724503404, 'y': 191.14165358617765},
        {'x': 470.39680298103957, 'y': 194.20435658005223}, {'x': 473.17955783532307, 'y': 197.38227310404667},
        {'x': 476.0225871677439, 'y': 200.7846629588346}, {'x': 479.0419017301035, 'y': 204.33056530990157},
        {'x': 482.17642185243693, 'y': 208.0387719073617}, {'x': 485.55297538300823, 'y': 212.01683466517147},
        {'x': 489.449431357533, 'y': 216.35940268400225}, {'x': 494.03199478038306, 'y': 221.1981084969143},
        {'x': 498.94567591488277, 'y': 226.18360497450385}, {'x': 503.7850269088329, 'y': 230.82339053343352},
        {'x': 508.4917909308354, 'y': 235.10836038320426}, {'x': 512.9732500949353, 'y': 238.9579950438421},
        {'x': 517.2526073796741, 'y': 242.29654606476893}, {'x': 521.384972010565, 'y': 245.10723197737798},
        {'x': 525.2969848114085, 'y': 247.41600168021867}, {'x': 529.0611163626996, 'y': 249.41523857590155},
        {'x': 532.7243862557215, 'y': 251.04921594524058}, {'x': 536.5030158894064, 'y': 252.2952328873137},
        {'x': 540.8117297845182, 'y': 253.3385050776178}, {'x': 545.4624601451158, 'y': 254.09222104590208},
        {'x': 550.2700203545711, 'y': 254.4750864937323}, {'x': 555.4890117772342, 'y': 254.64524891499022},
        {'x': 561.1040776627116, 'y': 254.72087665777153}, {'x': 566.9561439821831, 'y': 254.7544889878965},
        {'x': 572.9813908089699, 'y': 254.7694278012854}, {'x': 578.7818745573142, 'y': 254.77606727390267},
        {'x': 584.0601342312985, 'y': 254.77901815062145}, {'x': 588.6733101647206, 'y': 254.7803296513854},
        {'x': 592.7180774789286, 'y': 254.78091254061383}, {'x': 596.4788609867287, 'y': 254.78117160249312},
        {'x': 600.1378925107877, 'y': 254.79506863009146}, {'x': 603.7017575956993, 'y': 255.0802605219147},
        {'x': 607.6959307425233, 'y': 256.3217084584764}, {'x': 611.3043587045763, 'y': 258.1600408632725},
        {'x': 614.0789433748733, 'y': 260.50650735898535}, {'x': 616.4340237819654, 'y': 263.8269948674001},
        {'x': 618.2227102345964, 'y': 267.22282573232343}, {'x': 619.6849055095987, 'y': 270.6590278265621},
        {'x': 620.9682547165056, 'y': 273.87927994247184}, {'x': 622.3508744378046, 'y': 277.6060296802575},
        {'x': 623.4528018636096, 'y': 281.63711649586486}, {'x': 624.164722890144, 'y': 286.09556832023486},
        {'x': 624.5169545973461, 'y': 289.96546614953627}, {'x': 624.6735020227692, 'y': 293.4408238587059},
        {'x': 624.7430786562905, 'y': 296.7818237995194}, {'x': 624.6307121562198, 'y': 300.0269307761319},
        {'x': 624.2307913824616, 'y': 303.1212602163065}, {'x': 623.0348091003939, 'y': 307.00458041406154},
        {'x': 621.2969279294093, 'y': 310.7022261542}, {'x': 618.5814105141993, 'y': 314.4451526324801},
        {'x': 615.7520713336161, 'y': 317.6425850621352}, {'x': 612.9041919263892, 'y': 320.4625410606017},
        {'x': 610.0273958173516, 'y': 323.0151859375967}, {'x': 607.2004332068727, 'y': 325.2406190701384},
        {'x': 604.4607305198466, 'y': 327.14838882440654}, {'x': 600.5720960212146, 'y': 329.3586495783049},
        {'x': 595.2155452501213, 'y': 331.6540969124305}, {'x': 589.6788637225172, 'y': 333.5637079364371},
        {'x': 583.9718560988966, 'y': 335.1113461868106}, {'x': 578.0909868794575, 'y': 336.3792680553215},
        {'x': 572.2079416874557, 'y': 337.39025004932694}, {'x': 566.1975075034525, 'y': 338.1606221856721},
        {'x': 560.3719178494799, 'y': 338.84747413920974}, {'x': 555.2795229866323, 'y': 339.513397282116},
        {'x': 551.0427889344523, 'y': 340.1820769423698}, {'x': 547.4753575759506, 'y': 340.89882620386675},
        {'x': 543.5013045751331, 'y': 342.0089659641366}, {'x': 539.4519332845981, 'y': 343.860934290629},
        {'x': 535.4162801842618, 'y': 346.99815855203207}, {'x': 532.1545425553702, 'y': 350.2102317299878},
        {'x': 529.6535658909767, 'y': 353.3260503471531}, {'x': 527.7435527645756, 'y': 356.4659132366108},
        {'x': 526.2859830622265, 'y': 359.83554477182696}, {'x': 525.1376634187635, 'y': 363.51707956535284},
        {'x': 524.2842062026101, 'y': 367.4774323923028}, {'x': 523.688910318444, 'y': 371.7301463060601},
        {'x': 523.2865456208903, 'y': 375.90198794881604}, {'x': 523.0829147408914, 'y': 379.68549687132463},
        {'x': 522.9924121275586, 'y': 383.16999723204214}, {'x': 523.6176980031145, 'y': 387.4134283729022},
        {'x': 524.941067246417, 'y': 391.1402293841467}, {'x': 526.8085734407783, 'y': 394.0793748314186},
        {'x': 530.0543175373849, 'y': 396.87203352605866}, {'x': 534.1730435498426, 'y': 399.38464528964874},
        {'x': 539.4510123085623, 'y': 401.9057504335167}, {'x': 545.4736093658713, 'y': 404.42511087578555},
        {'x': 551.6142715044303, 'y': 406.82349054572916}, {'x': 557.710609775744, 'y': 409.20082260896214},
        {'x': 563.3456441246267, 'y': 411.55604684674944}, {'x': 568.1621645328204, 'y': 413.7967324153474},
        {'x': 572.2790493687053, 'y': 415.995135950272}, {'x': 575.9747563226749, 'y': 418.30563020436466},
        {'x': 579.1987287155079, 'y': 420.72554602326505}, {'x': 582.0408129023014, 'y': 423.3018960515726},
        {'x': 584.583653903, 'y': 426.05697634603075}, {'x': 586.7513428334804, 'y': 428.94557247685276},
        {'x': 588.5893637841607, 'y': 431.99272501671845}, {'x': 590.168218093404, 'y': 435.19645562085634},
        {'x': 591.4892872515824, 'y': 438.7887454488239}, {'x': 592.6172344924568, 'y': 443.0277303026794},
        {'x': 593.6583212146742, 'y': 447.8548350378325}, {'x': 594.4692885049883, 'y': 453.163109463429},
        {'x': 594.9117052040882, 'y': 459.2071065087269}, {'x': 595.1138468502063, 'y': 466.0134943375977},
        {'x': 594.5767585694686, 'y': 473.47597346114486}, {'x': 592.8916400270651, 'y': 481.41226879788337},
        {'x': 590.4217444053546, 'y': 489.0937786574698}, {'x': 587.351251275065, 'y': 496.22388592217595},
        {'x': 583.5760041655093, 'y': 502.9105158978961}, {'x': 579.2088736684672, 'y': 508.89332496093806},
        {'x': 574.0795406408465, 'y': 514.1919936205153}, {'x': 567.8629300936074, 'y': 518.8231958047198},
        {'x': 560.8237899060902, 'y': 522.6251918781973}, {'x': 553.0942345570278, 'y': 525.7913518265077},
        {'x': 544.4312569349232, 'y': 528.3239130465421}, {'x': 534.9910419156178, 'y': 530.3781833893678},
        {'x': 525.060026423579, 'y': 532.1626915746245}, {'x': 514.1706170166475, 'y': 533.5916909264921},
        {'x': 502.30513773692724, 'y': 534.6677167042126}, {'x': 490.35410982149506, 'y': 535.3705333849838},
        {'x': 478.7618848796729, 'y': 535.7187187162909}, {'x': 467.15551304740865, 'y': 535.8734677524276},
        {'x': 454.8711486271421, 'y': 535.8788740321843}, {'x': 441.2771967139391, 'y': 535.3859388541961},
        {'x': 426.40917461977534, 'y': 533.7793353035914}, {'x': 411.1598827303167, 'y': 531.1445392871286},
        {'x': 396.274712962606, 'y': 527.8543669075607}, {'x': 382.22927991962655, 'y': 523.9825244343209},
        {'x': 368.96526029558635, 'y': 519.2190389690248}, {'x': 354.01136096988927, 'y': 511.24152322716685},
        {'x': 337.28161430656826, 'y': 499.8769125825409}, {'x': 321.60412230447446, 'y': 487.8570745676937},
        {'x': 307.9288971204324, 'y': 476.52257935309916}, {'x': 296.91171486195645, 'y': 466.9201651448284},
        {'x': 288.9270469245353, 'y': 459.5963236388281}, {'x': 283.4427480063485, 'y': 454.05505295285684},
        {'x': 279.62810499410483, 'y': 449.5643879853167}, {'x': 276.7866670773676, 'y': 445.6777619380632},
        {'x': 274.6443833695334, 'y': 442.3620381351847}, {'x': 272.8183454548789, 'y': 439.045483082748},
        {'x': 271.5331317587607, 'y': 435.50294702886794}, {'x': 270.8299950730909, 'y': 432.15998537292853},
        {'x': 270.88331275392943, 'y': 428.346321171967}, {'x': 271.7984891815364, 'y': 424.0399663771146},
        {'x': 273.48596188242254, 'y': 419.36961167204316}, {'x': 275.55353299842204, 'y': 414.78170650894816},
        {'x': 277.46865132443367, 'y': 410.7574690905414}, {'x': 279.3397803026611, 'y': 407.06126155060906},
        {'x': 281.1520892124783, 'y': 403.53185321785367}, {'x': 282.83939351600236, 'y': 400.23849057222895},
        {'x': 284.62132908662966, 'y': 396.3735000898757}, {'x': 286.3130471931305, 'y': 392.36226649683135},
        {'x': 287.98430162416884, 'y': 388.1110421445697}, {'x': 289.72982352639565, 'y': 383.83756459318835},
        {'x': 291.49354133634796, 'y': 379.8841878244755}, {'x': 293.06589924389505, 'y': 376.47989434089817},
        {'x': 295.1336352167058, 'y': 372.55009758069144}, {'x': 297.52901195615283, 'y': 368.622699317788},
        {'x': 299.7779008450173, 'y': 365.1862062072112}, {'x': 301.74983410343987, 'y': 362.1711251642389},
        {'x': 303.5563078705416, 'y': 359.28788115239803}, {'x': 305.62234533498076, 'y': 355.58001687345677},
        {'x': 307.5815623454226, 'y': 351.6207078513589}, {'x': 309.67173629860696, 'y': 346.72567476830744},
        {'x': 312.0326484891836, 'y': 340.92356506689913}, {'x': 314.36645968400677, 'y': 335.0600185381241},
        {'x': 316.65308839145956, 'y': 329.1801851054857}, {'x': 318.99728748267216, 'y': 323.3447875973986},
        {'x': 321.3086220591112, 'y': 317.91466041838925},         {'x': 323.57106018066406, 'y': 312.87599690755206}
    ]

    track_points = np.array([[p['x'], p['y']] for p in frontend_track_data])
    if not np.allclose(track_points[0], track_points[-1], atol=1e-3):
        track_points = np.vstack([track_points, track_points[0]])

    car_setups = [
        ("Aggressive (Light/High Downforce)", {
            'mass': 700,
            'yaw_inertia': 1000,
            'front_cornering_stiffness': 130000,
            'rear_cornering_stiffness': 160000,
            'max_engine_force': 17000,
            'downforce_factor': 3.5,
            'max_straight_speed': 90,
            'brake_force_multiplier': 3.2,
        }, '#0066FF'),
        ("Balanced", {
            'mass': 798,
            'yaw_inertia': 1200,
            'front_cornering_stiffness': 100000,
            'rear_cornering_stiffness': 140000,
            'max_engine_force': 15000,
            'downforce_factor': 3.0,
            'max_straight_speed': 85,
            'brake_force_multiplier': 3.0,
        }, '#FF0000'),
        ("Conservative (Heavy/Low Downforce)", {
            'mass': 900,
            'yaw_inertia': 1500,
            'front_cornering_stiffness': 80000,
            'rear_cornering_stiffness': 110000,
            'max_engine_force': 13000,
            'downforce_factor': 2.5,
            'max_straight_speed': 80,
            'brake_force_multiplier': 2.8,
        }, '#00AA00'),
    ]

    # Larger figure to reduce clutter
    fig, ax = plt.subplots(1, 1, figsize=(12, 6))
    fig.patch.set_facecolor('white')

    for label, params, color in car_setups:
        s, v_fwd, v_fin = compute_speed_profiles(track_points, params, friction=1.0)
        # Final profile after backward pass (solid)
        ax.plot(s, v_fin, color=color, linewidth=2.2, label=f"{label} (Backward)")
        # Forward pass profile (dashed)
        ax.plot(s, v_fwd, color=color, linewidth=1.6, linestyle='--', label=f"{label} (Forward)")

    ax.set_xlabel('Distance Along Path (m)')
    ax.set_ylabel('Velocity (m/s)')
    ax.grid(True, linestyle=':', linewidth=0.6)
    # Place legend outside the axes on the right
    legend = ax.legend(loc='center left', bbox_to_anchor=(1.02, 0.5), frameon=True)
    plt.subplots_adjust(right=0.78)
    plt.tight_layout()

    out_dir = os.path.join(os.path.dirname(__file__), 'poster_output')
    os.makedirs(out_dir, exist_ok=True)
    png = os.path.join(out_dir, 'kapania_three_cars_speed_compare.png')
    pdf = os.path.join(out_dir, 'kapania_three_cars_speed_compare.pdf')
    plt.savefig(png, dpi=300, bbox_inches='tight', facecolor='white', bbox_extra_artists=[legend])
    plt.savefig(pdf, bbox_inches='tight', facecolor='white', bbox_extra_artists=[legend])
    print(f"✅ Saved: {png}\n✅ Saved: {pdf}")


if __name__ == '__main__':
    main()

